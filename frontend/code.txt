// Backend (server.js)
const express = require('express');
const cors = require('cors');
const axios = require('axios');
const { SummarizerManager } = require('node-summarizer');
require('dotenv').config();

const app = express();
app.use(cors());

const API_KEY = '2ebc5b505303468e85cd26cef759fb02';
const summarizer = new SummarizerManager();

const getSummary = async (text, sentences = 2) => {
  if (!text) return '';
  try {
    const result = await summarizer.summarize(text, sentences);
    return result.summary;
  } catch (error) {
    return text.split(' ').slice(0, 50).join(' ') + '...';
  }
};

app.get('/api/news', async (req, res) => {
  const category = req.query.category || 'general';
  console.log('Fetching news for category:', category); // Debug log
  
  try {
    const response = await axios.get(
      `https://newsapi.org/v2/top-headlines`, {
        params: {
          country: 'us',
          category: category,
          apiKey: API_KEY
        }
      }
    );

    const processedArticles = await Promise.all(
      response.data.articles.map(async (article) => {
        const fullText = article.content || article.description || '';
        const summary = await getSummary(fullText);
        return {
          ...article,
          summary
        };
      })
    );

    res.json({ ...response.data, articles: processedArticles });
  } catch (error) {
    console.error('Error fetching news:', error); // Debug log
    res.status(500).json({ error: error.message });
  }
});

app.listen(5000, () => {
  console.log('Server running on port 5000');
});



// Backend (package.json)
{
  "name": "backend",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "axios": "^1.7.8",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.21.1",
    "node-summarizer": "^1.0.7"
  }
}



// Frontend (src/App.js)
import { useState, useEffect, useCallback } from 'react';
import './App.css';
import snapNewsLogo from './assets/snapnews-logo.png'; // Add your logo file

const CATEGORIES = [
  { id: 'general', label: 'General' },
  { id: 'business', label: 'Business' },
  { id: 'technology', label: 'Technology' },
  { id: 'entertainment', label: 'Entertainment' },
  { id: 'sports', label: 'Sports' },
  { id: 'science', label: 'Science' },
  { id: 'health', label: 'Health' }
];


const LoadingScreen = () => (
  <div className="loading">
    <img 
      src={snapNewsLogo} 
      alt="SnapNews Logo" 
      className="loading-logo"
    />
  </div>
);

function App() {
  const [news, setNews] = useState([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [loading, setLoading] = useState(true);
  const [category, setCategory] = useState('general');

  const fetchNews = useCallback(async () => {
    try {
      setLoading(true);
      console.log('Fetching news for category:', category);
      const response = await fetch(`http://localhost:5000/api/news?category=${category}`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      if (data.articles && Array.isArray(data.articles)) {
        setNews(data.articles);
        setCurrentIndex(0);
      } else {
        console.error('Invalid data format:', data);
      }
    } catch (error) {
      console.error('Error fetching news:', error);
    } finally {
      setLoading(false);
    }
  }, [category]);

  useEffect(() => {
    fetchNews();
  }, [fetchNews]);

  const handleScroll = (e) => {
    if (e.deltaY > 0 && currentIndex < news.length - 1) {
      setCurrentIndex(prev => prev + 1);
    } else if (e.deltaY < 0 && currentIndex > 0) {
      setCurrentIndex(prev => prev - 1);
    }
  };

  const handleCategoryChange = (newCategory) => {
    console.log('Changing category to:', newCategory);
    setCategory(newCategory);
  };

  const handleSourceClick = (url) => {
    if (url) {
      window.open(url, '_blank', 'noopener noreferrer');
    }
  };

  if (loading) {
    return <LoadingScreen />;
  }

  return (
    <div className="app" onWheel={handleScroll}>
      <div className="categories-container">
        {CATEGORIES.map(cat => (
          <button
            key={cat.id}
            className={`category-button ${category === cat.id ? 'active' : ''}`}
            onClick={() => handleCategoryChange(cat.id)}
          >
            {cat.label}
          </button>
        ))}
      </div>
      {news.length > 0 && (
        <div className="story-container">
          <div className="story-card">
            <h2 className="title">{news[currentIndex].title}</h2>
            <div className="image-container">
              {news[currentIndex].urlToImage ? (
                <img 
                  src={news[currentIndex].urlToImage} 
                  alt={news[currentIndex].title} 
                  className="news-image"
                  onError={(e) => {
                    e.target.onerror = null;
                    e.target.parentElement.innerHTML = '<div class="placeholder-image">No image available</div>';
                  }}
                />
              ) : (
                <div className="placeholder-image">No image available</div>
              )}
            </div>
            <p className="explanation">
              {news[currentIndex].summary || news[currentIndex].description || 'No summary available'}
            </p>
            <div className="metadata">
              <p className="source">
                Source:{' '}
                <a 
                  href={news[currentIndex].url} 
                  target="_blank" 
                  rel="noopener noreferrer" 
                  className="source-link"
                >
                  {news[currentIndex].source?.name || 'Unknown'}
                </a>
              </p>
              <p className="date">
                Date: {new Date(news[currentIndex].publishedAt).toLocaleDateString()}
              </p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default App;


// Frontend (src/App.css)
.app {
  width: 100vw;
  height: 100vh;
  background-color: #f0f2f5;
  display: flex;
  flex-direction: column;
  align-items: center;
  overflow: hidden;
  padding: 20px;
}

.loading {
  width: 100vw;
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #f0f2f5;
}

.loading-logo {
  width: 200px;
  height: auto;
  animation: pulse 1.5s ease-in-out infinite;
}

@keyframes pulse {
  0% { opacity: 0.6; transform: scale(0.98); }
  50% { opacity: 1; transform: scale(1); }
  100% { opacity: 0.6; transform: scale(0.98); }
}

.categories-container {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-bottom: 20px;
  justify-content: center;
  max-width: 100%;
  padding: 0 20px;
}

.category-button {
  padding: 8px 16px;
  border: none;
  border-radius: 20px;
  background-color: #e4e6eb;
  color: #1a1a1a;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 0.9rem;
}

.category-button:hover {
  background-color: #dce0e6;
}

.category-button.active {
  background-color: #1a1a1a;
  color: white;
}

.story-container {
  width: 100%;
  max-width: 400px;
  height: calc(100vh - 120px);
  background-color: white;
  border-radius: 15px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  overflow: hidden;
}

.story-card {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  padding: 20px;
  box-sizing: border-box;
}

.title {
  font-size: 1.5rem;
  margin: 0 0 15px 0;
  color: #1a1a1a;
  line-height: 1.3;
}

.image-container {
  width: 100%;
  height: 200px;
  background-color: #f0f2f5;
  border-radius: 10px;
  overflow: hidden;
  margin-bottom: 15px;
}

.news-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.placeholder-image {
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: #e4e6eb;
  color: #65676b;
}

.explanation {
  font-size: 1rem;
  line-height: 1.5;
  color: #333;
  margin: 15px 0;
  flex-grow: 1;
  overflow-y: auto;
  padding-right: 10px;
}

/* Custom scrollbar for explanation */
.explanation::-webkit-scrollbar {
  width: 6px;
}

.explanation::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 3px;
}

.explanation::-webkit-scrollbar-thumb {
  background: #888;
  border-radius: 3px;
}

.explanation::-webkit-scrollbar-thumb:hover {
  background: #555;
}

.metadata {
  margin-top: auto;
  border-top: 1px solid #e4e6eb;
  padding-top: 15px;
}

.source, .date {
  font-size: 0.9rem;
  color: #65676b;
  margin: 5px 0;
}

.source-link {
  color: #1a73e8;
  text-decoration: none;
  transition: color 0.2s ease;
}

.source-link:hover {
  color: #1557b0;
  text-decoration: underline;
}

.source a {
  color: #1a73e8;
}

/* Media Queries for Responsiveness */
@media (max-width: 768px) {
  .app {
    padding: 10px;
  }

  .categories-container {
    padding: 0 10px;
  }

  .category-button {
    padding: 6px 12px;
    font-size: 0.8rem;
  }

  .story-container {
    height: calc(100vh - 100px);
  }

  .title {
    font-size: 1.2rem;
  }

  .image-container {
    height: 160px;
  }

  .explanation {
    font-size: 0.9rem;
  }

  .loading-logo {
    width: 150px;
  }
}

@media (max-width: 480px) {
  .categories-container {
    gap: 5px;
  }

  .category-button {
    padding: 4px 8px;
    font-size: 0.7rem;
  }

  .story-card {
    padding: 15px;
  }

  .image-container {
    height: 140px;
  }

  .loading-logo {
    width: 120px;
  }
}



// Frontend (src/main.jsx)
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)



// Frontend (src/index.css)
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }
  
  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,
      Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  }


// Frontend (index.html)
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/logo.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SnapNews</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>



// Frontend (package.json)
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.15.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "vite": "^6.0.1"
  }
}
